cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
# Which predictor has minimum cross-validated error?
names(trainSpam)[which.min(cvError)]
trainSpam$numType
Use the best model from the group
predictionModel = glm(numType ~ charDollar,family="binomial",data=trainSpam)
# Get predictions on the test set
predictionTest = predict(predictionModel,testSpam)
predictedSpam = rep("nonspam",dim(testSpam)[1])
# Classify as 'spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
# Classification table
table(predictedSpam, testSpam$type)
# Use the best model from the group
predictionModel = glm(numType ~ charDollar,family="binomial",data=trainSpam)
# Get predictions on the test set
predictionTest = predict(predictionModel,testSpam)
predictedSpam = rep("nonspam",dim(testSpam)[1])
# Classify as 'spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
# Classification table
table(predictedSpam, testSpam$type)
rm(ls())
ls()
rm(ls())
install.packages("ggplot2")
.5
?xyplot
xyplot()
library(lattice)
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lines
?axis
?panel.lmline()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
?trellis.par.set()
?splom()
?print.tellis
?print.tellis()
?print.trellis
?par
?trellis.par.set()
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
load(ggplot2)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
plot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
?geom
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
4200*14
4300*14
?aggregate
4^3
3^4
3^2 + 4^2
5^2
100/12
100/12 * 18
100/12 * 17
140/17
140 * 4
hora = 140 / 7
hora * 4
hora * 6
hora * 9
14-9
hora * 14
hora
140/7
hora = 140 / 17
hora
hora * 4
hora * 9
hora * 14
4 + 9 + 14 + 14 + 14
hora * 55
140 * 4
140 * 3
207654912/2
?log
log(207654912, base = 2)
?ggvis
install.packages("ggvis")
data(mtcars)
mean(mtcars$mpg)
mu <- mean(mtcars$mpg)
mu0 <- mu
rm(mu)
q1 <- data.set(subject = 1:5, baseline = c(140, 138, 150, 148, 135), week2 <- c(132, 135, 151, 146, 130))
q1 <- data.frame(subject = 1:5, baseline = c(140, 138, 150, 148, 135), week2 <- c(132, 135, 151, 146, 130))
q1 <- data.frame(subject = 1:5, baseline = c(140, 138, 150, 148, 135), week2 = c(132, 135, 151, 146, 130))
rm(week2)
q1
?t.test
t.test(q1$baseline, q1$week2, paired = T)
test1 <- t.test(q1$baseline, q1$week2, paired = T)
test1$p.value
round(test1$p.value, 3)
?t.test
1100 + c(-1, 1) * qt(.975, 9-1) * 30 / sqrt(9)
round(1100 + c(-1, 1) * qt(.975, 9-1) * 30 / sqrt(9))
pbinom(2, prob = .5, size = 4, lower.tail = FALSE)
round(pbinom(54, prob = .5, size = 100, lower.tail = FALSE),4)
pbinom(2, prob = .5, size = 4, lower.tail = FALSE)
pbinom(3, prob = .5, size = 4, lower.tail = FALSE)
round(pbinom(2, prob = .5, size = 4, lower.tail = FALSE), 2)
1/100
10(1787)
10/1787
?ppois
ppois(10+1, 1/100 * 1787, lower.tail = TRUE)
round(ppois(10+1, 1/100 * 1787, lower.tail = TRUE), 2)
round(ppois(10, 1/100 * 1787, lower.tail = TRUE), 2)
round(ppois(10-1, 1/100 * 1787, lower.tail = TRUE), 2)
round(ppois(10, 1/100 * 1787, lower.tail = TRUE), 2)
-3 - 1 + c(-1, 1) * qt(.975, 9+9-2) * (8 * 1.5^2 + 8 * 1.8^2) / (9+9-2) * sqrt(2/9)
-3 - 1 + c(-1, 1) * qt(1-0.1/2, 9+9-2) * (8 * 1.5^2 + 8 * 1.8^2) / (9+9-2) * sqrt(2/9)
-3 - 1 + c(-1, 1) * qt(1-0.01/2, 9+9-2) * (8 * 1.5^2 + 8 * 1.8^2) / (9+9-2) * sqrt(2/9)
-3 - 1 + c(-1, 1) * qt(1-0.05/2, 9+9-2) * (8 * 1.5^2 + 8 * 1.8^2) / (9+9-2) * sqrt(2/9)
-3 - 1 + c(-1, 1) * qt(1-0.10/2, 9+9-2) * (8 * 1.5^2 + 8 * 1.8^2) / (9+9-2) * sqrt(2/9)
## q5
-3 - 1 + c(-1, 1) * qt(1-0.01/2, 9+9-2) * (8 * 1.5^2 + 8 * 1.8^2) / (9+9-2) * sqrt(2/9)
-3 - 1 + c(-1, 1) * qt(1-0.05/2, 9+9-2) * (8 * 1.5^2 + 8 * 1.8^2) / (9+9-2) * sqrt(2/9)
-3 - 1 + c(-1, 1) * qt(1-0.10/2, 9+9-2) * (8 * 1.5^2 + 8 * 1.8^2) / (9+9-2) * sqrt(2/9)
?power.t.test
power.t.test(n = 100, delta = -0.01, sd = 0.04, sig.level = 0.05, type = "one.sample", alternative = "one.sided")
(power.t.test(n = 100,
delta = -0.01,
sd = 0.04,
sig.level = 0.05,
type = "one.sample",
alternative = "one.sided"))$power
(power.t.test(n = 100,
delta = 0.01,
sd = 0.04,
sig.level = 0.05,
type = "one.sample",
alternative = "one.sided"))$power
(power.t.test(n = 100,
delta = 0.01,
sd = 0.04,
sig.level = 0.05,
power = NULL,
type = "one.sample",
alternative = "one.sided"))$power
(power.t.test(n = NULL,
delta = 0.01,
sd = 0.04,
sig.level = 0.05,
power = NULL,
type = "one.sample",
alternative = "one.sided"))$power
(power.t.test(n = NULL,
delta = 0.01,
sd = 0.04,
sig.level = 0.05,
power = 0.90,
type = "one.sample",
alternative = "one.sided"))$power
(power.t.test(n = NULL,
delta = 0.01,
sd = 0.04,
sig.level = 0.05,
power = 0.90,
type = "one.sample",
alternative = "one.sided"))
(power.t.test(n = 100,
delta = 0.01,
sd = 0.04,
sig.level = 0.05,
power = NULL,
type = "one.sample",
alternative = "one.sided"))$power
(power.t.test(n = 100,
delta = 0.01,
sd = 0.04,
sig.level = 0.5,
power = NULL,
type = "one.sample",
alternative = "one.sided"))$power
2404-1605
pC <- 1/1000
pYC <- 0.99
pNM <- 0.99
pC <- 1/1000
source('~/Documents/Estudis/Coursera/Data Science Specialization/8 Practical Machine Learning/quiz1.R', echo=TRUE)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
source('~/Documents/Estudis/Coursera/Data Science Specialization/7 Regression Models/quiz2.R', echo=TRUE)
source('~/Documents/Estudis/Coursera/Data Science Specialization/7 Regression Models/quiz2.R', echo=TRUE)
source('~/Documents/Estudis/Coursera/Data Science Specialization/7 Regression Models/quiz2.R', echo=TRUE)
tmp <- lm(y ~ x)
tmp$model
str(tmp)
tmp$coefficients
tmp$xlevels
summary(tmp$xlevels)
summary(tmp)
summary(lm(y ~ x))$p.value
summary(lm(y ~ x))$p.values
tmp
tmp <- summary(tmp)
tmp$fstatistic
tmp
lm(y ~ x)$coefficients
resid(lm(y ~ x))
source('~/Documents/Estudis/Coursera/Data Science Specialization/7 Regression Models/quiz2.R', echo=TRUE)
mtcars
lm(wt ~ mpg, data = mtcars)
summary(lm(wt ~ mpg, data = mtcars))
lm(mpg ~ wt, data = mtcars)
summary(lm(mpg ~ wt, data = mtcars))
mean(mtcars$wt)
coef <- summary(lm(mpg ~ wt, data = mtcars))$coefficients
coef
coef[1]
coef[1,1]
coef[1,2]
fit <- lm(mpg ~ wt, data = mtcars)
coef <- summary(fit)$coefficients
coef[2, 1] + c(-1, 1) * qt(.975, df = fit$df) * coef[2, 2]
?mtcars
head(mtcars)
mean(mtcars$wt) + c(-1, 1) * qt(.975, df = fit$df) * coef[2, 2]
coef[1, 1] + coef[2, 1] * mean(mtcars$wt) + c(-1, 1) * qt(.975, df = fit$df) * coef[2, 2]
ssx <- sum((mtcars$wt-mean(mtcars$wt))^2)
sigma <- summary(fit)$sigma
sigma * sqrt(1+1/length(mtcars$wt)+(mean(mtcars$wt)-mean(mtcars$wt))^2/ssx)
mean(mtcars$wt) + c(-1, 1) * sigma * sqrt(1+1/length(mtcars$wt)+(mean(mtcars$wt)-mean(mtcars$wt))^2/ssx)
mean(mtcars$wt) + c(-1, 1) * 2 * sigma * sqrt(1+1/length(mtcars$wt)+(mean(mtcars$wt)-mean(mtcars$wt))^2/ssx)
mean(mtcars$wt) + c(-1, 1) * 2 * sigma * sqrt(1/length(mtcars$wt)+(mean(mtcars$wt)-mean(mtcars$wt))^2/ssx)
coef[1, 1] + coef[1, 2] * mean(mtcars$wt) + c(-1, 1) * 2 * sigma * sqrt(1+1/length(mtcars$wt)+(mean(mtcars$wt)-mean(mtcars$wt))^2/ssx)
coef[1, 1] + coef[2, 1] * mean(mtcars$wt) + c(-1, 1) * 2 * sigma * sqrt(1+1/length(mtcars$wt)+(mean(mtcars$wt)-mean(mtcars$wt))^2/ssx)
coef[1, 1] + coef[2, 1] * mean(mtcars$wt)
fit
37 - 5.3 * mean(mtcars$wt)
coef[1, 1] + coef[2, 1] * mean(mtcars$wt) + c(-1, 1) * 2 * sigma * sqrt(1+1/length(mtcars$wt)+(mean(mtcars$wt)-mean(mtcars$wt))^2/ssx)
coef[1, 1] + coef[2, 1] * mean(mtcars$wt) + c(-1, 1) * sigma * sqrt(1+1/length(mtcars$wt)+(mean(mtcars$wt)-mean(mtcars$wt))^2/ssx)
library(ggplot2)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_line()
mean(mtcars$wt)
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_line() + geom_smooth(method = "lm")
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point() + geom_smooth(method = "lm")
summary(fit)
coef[1, 1] + coef[2, 1] * 3
predict(fit, newdata = data.frame(wt = mean(mtcars$wt)), interval = "predict")
coef <- summary(fit)$coefficients
coef[2, 1] + c(-1, 1) * qt(.975, df = fit$df) * coef[2, 2]
ssx <- sum((mtcars$wt-mean(mtcars$wt))^2)
sigma <- summary(fit)$sigma
coef[1, 1] + coef[2, 1] * mean(mtcars$wt) + c(-1, 1) * sigma * sqrt(1+1/length(mtcars$wt)+(mean(mtcars$wt)-mean(mtcars$wt))^2/ssx)
predict(fit, newdata = data.frame(wt = mean(mtcars$wt)), interval = "predict")
mean(mtcars$wt)
?predict
?predict.lm
predict(fit, newdata = data.frame(wt = mean(mtcars$wt)))
predict(fit, newdata = data.frame(wt = mean(mtcars$wt)), interval = "expected")
predict(fit, newdata = data.frame(wt = mean(mtcars$wt)), interval = "confidence")
predict(fit, newdata = data.frame(wt = mean(mtcars$wt)), interval = "prediction")
predict(fit, newdata = data.frame(wt = 3)), interval = "prediction")
predict(fit, newdata = data.frame(wt = 3), interval = "prediction")
predict(fit, newdata = data.frame(wt = 2), interval = "confidence")
coef <- summary(fit)$coefficients
coef[2, 1] + c(-1, 1) * qt(.975, df = fit$df) * coef[2, 2]
fit2 <- lm(mpg ~ 2 * wt, data = mtcars)
mtcars2 <- mtcars
mtcars2$wt <- 2 * mtcars$wt
fit2 <- lm(mpg ~ 2 * wt, data = mtcars2)
coef2 <- summary(fit2)$coefficients
mtcars2 <- mtcars
mtcars2$wt <- 2 * mtcars$wt
fit2 <- lm(mpg ~ wt, data = mtcars2)
coef2 <- summary(fit2)$coefficients
coef2[2, 1] + c(-1, 1) * qt(.975, df = fit$df) * coef2[2, 2]
mtcars2 <- mtcars
mtcars2$wt <- mtcars$wt / 2
fit2 <- lm(mpg ~ wt, data = mtcars2)
coef2 <- summary(fit2)$coefficients
coef2[2, 1] + c(-1, 1) * qt(.975, df = fit$df) * coef2[2, 2]
coef <- summary(fit)$coefficients
coef[2, 1] + c(-1, 1) * qt(.975, df = fit$df) * coef[2, 2]
2 * (coef[2, 1] + c(-1, 1) * qt(.975, df = fit$df) * coef[2, 2])
fit
summary(fit)
fit$residuals
tmp <- summary(fit)
tmp$residuals
(mtcars$mpg - mean(mtcars$mpg))^2
predict(fit)
(mtcars$mpg - predict(fit))^2
fit$residuals
(mtcars$mpg - predict(fit))
sum((mtcars$mpg - mean(mtcars$mpg))^2)
sum(fit$residuals^2)
sum((mtcars$mpg - mean(mtcars$mpg))^2) / sum(fit$residuals^2)
sum(fit$residuals)
sum(fit$residuals^2) / sum((mtcars$mpg - mean(mtcars$mpg))^2)
rm(list=ls())
library(datasets); data(swiss); require(stats); require(graphics)
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 3 + (swiss$Catholic > 50))
39 * 2 + 4 * 2 + 379.12 / 3 * 2
?runif
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)
fit2 <- lm(mpg ~ factor(cyl), data = mtcars)
summary(fit2)
fit3 <- lm(mpg ~ factor(cyl) + wt + factor(cyl):wt, data = mtcars)
summary(fit3)
fit3 <- lm(mpg ~ factor(cyl):wt, data = mtcars)
summary(fit3)
fit3 <- update(fit1, lm(mpg ~ factor(cyl) + wt + factor(cyl):wt)
fit3 <- update(fit1, lm(mpg ~ factor(cyl) + wt + factor(cyl):wt))
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit3 <- update(fit1, lm(mpg ~ factor(cyl) + wt + factor(cyl):wt))
fit3 <- update(fit1, lm(mpg ~ factor(cyl) + wt + factor(cyl):wt, data = mtcars))
anova(fit1, fit3)
summary(fit1)
anova(fit1, fit3)
summary(fit3)
fit4 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit4)
?mtcars
?influence.measures
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y ~ x)
hatvalues(fit5)
plot(x = x, y = y)
?influence.measures
dfbeta(fit1)
dfbeta(fit5)
round(dfbeta(fit5)[1: 5, 2], 3)
round(dfbetas(fit5)[1: 5, 2], 3)
?dfbeta
?dfbetas
rm(list=ls())
?shuttle
library(MASS)
?shuttle
head(shuttle)
str(shuttle)
levels(shuttle$use)
unique(shuttle$use)
glm(use ~ wind, data = shuttle, family = "binomial")
shuttle$useNum <- shuttle$use % 2
shuttle$useNum <- ifelse(shuttle$use == "auto", 1, 0)
str(shuttle)
shuttle$useNum <- integer(ifelse(shuttle$use == "auto", 1, 0))
shuttle$useNum <- as.integer(ifelse(shuttle$use == "auto", 1, 0))
str(shuttle)
shuttle$useNum <- ifelse(shuttle$use == "auto", 1, 0)
glm(useNum ~ wind, data = shuttle, family = "binomial")
mod1 <- glm(useNum ~ wind, data = shuttle, family = "binomial")
mod1$coefficients
mod1$coefficients[2]
1/mod1$coefficients[2]
str(shuttle)
summary(mod1)
exp(coef(mod1))
d <- shuttle
d$wind <- reorder(d$wind, c("tail", "head"))
?reorder
d$wind <- relevel(d$wind, "tail")
str(d)
glm(useNum ~ wind, data = d, family = "binomial")
exp(coef(glm(useNum ~ wind, data = d, family = "binomial")))
exp(coef(glm(useNum ~ wind, data = d, family = "binomial")))["windhead"]
d <- shuttle
d$wind <- relevel(d$wind, "tail")
mod1 <- glm(useNum ~ wind, data = d, family = "binomial")
exp(coef(mod1))["windhead"]
mod2 <- glm(useNum ~ wind + magn, data = d, family = "binomial")
exp(coef(mod1))["windhead"]
exp(coef(mod2))["windhead"]
mod2
glm(I[1-useNum] ~ wind + magn, data = d, family = "binomial")
glm(I(1-useNum) ~ wind + magn, data = d, family = "binomial")
mod3 <- glm(I(1-useNum) ~ wind + magn, data = d, family = "binomial")
coef(mod2)
coef(mod3)
?InsectSprays
head(InsectSprays)
str(InsectSprays)
mod4 <- glm(count ~ spray, data = InsectSprays)
mod4
1/coef(mod4)["sprayB"]
1/exp(coef(mod4))["sprayB"]
exp(coef(mod4))["sprayB"]
d <- InsectSprays
d$spray <- relevel(d$spray, "B")
mod4 <- glm(count ~ spray, data = d)
mod4
exp(coef(mod4))["sprayA"]
mod4 <- glm(count ~ spray, data = InsectSprays)
coef(mod4)
coef(mod4)["(Intercept)"]
coef(mod4)[c("(Intercept)", "sprayB")]
sum(coef(mod4)[c("(Intercept)", "sprayB")])
exp(sum(coef(mod4)[c("(Intercept)")])) / exp(sum(coef(mod4)[c("(Intercept)", "sprayB")]))
mod4 <- glm(count ~ spray, data = InsectSprays, family = "poisson")
exp(sum(coef(mod4)[c("(Intercept)")])) / exp(sum(coef(mod4)[c("(Intercept)", "sprayB")]))
exp(-coef(mod4)["srpayB"])
exp(-coef(mod4)["sprayB"])
coef(mod5)
mod5 <- glm(count ~ spray + offset(1), data = InsectSprays, family = "poisson")
coef(mod5)
t <- rep(1, nrow(InsectSprays))
mod5 <- glm(count ~ spray + offset(t), data = InsectSprays, family = "poisson")
coef(mod5)
t2 <- log(10) + t
mod5b <- glm(count ~ spray + offset(t2), data = InsectSprays, family = "poisson")
coef(mod5b)
1.67 - log(10)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x, y)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
xp <- x[x >= 0]
yp <- y[x >= 0]
lm(yp ~ xp)
xp <- x[x > 0]
yp <- y[x > 0]
lm(yp ~ xp)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
splineTerms
xMat<-cbind(1,x,splineTerms)
xMat
lm(y~xMat-1)
predict(lm(y~xMat-1))
mod6 <- lm(y~xMat-1)
coef(mod6)[3]
0.8304868+0.1825806
1.8435543-0.8304868
2.0372-1.0242
rm(list=ls())
?lda
library(MASS)
?lda
setwd("~/Documents/Estudis/Coursera/Data Science Specialization/7 Regression Models/project")
data(mtcars)
str(mtcars)
library(ggplot2)
data(mtcars)
?mtcars
ggplot(mtcars, aes(x=am, y=mpg)) + geom_points()
ggplot(mtcars, aes(x=am, y=mpg)) + geom_point()
ggplot(mtcars, aes(x=am, y=mpg)) + geom_boxplot()
ggplot(mtcars, aes(fill=am, x=mpg)) + geom_boxplot()
ggplot(mtcars, aes(fill=am, y=mpg)) + geom_boxplot()
?geom_boxplot
ggplot(mtcars, aes(factor(cyl), mpg)) + geom_boxplot()
ggplot(mtcars, aes(factor(am), mpg)) + geom_boxplot()
cor(mtcars)
?mtcars
pairs(mtcars, main = "mtcars data")
?mtcars
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
?mtcars
print(gbox)
gbox <- ggplot(mtcars, aes(factor(am), mpg)) + geom_boxplot()
print(gbox)
cor(mtcars)
cor(mtcars)["mpg"]
cor(mtcars)["mpg",]
?mtcars
cor(mtcars)["am",]
sort(cor(mtcars)["mpg",])
sort(abs(cor(mtcars)["mpg",]))
sort(abs(cor(mtcars)["am",]))
ggplot(mtcars, aes(x=factor(am), y=mpg, color=cyl)) + geom_boxplot()
ggplot(mtcars, aes(x=factor(am), y=mpg)) + geom_boxplot()
ggplot(mtcars, aes(x=factor(am), y=mpg)) + geom_boxplot(fill=cyl)
ggplot(mtcars, aes(x=factor(am), y=mpg)) + geom_boxplot(color=cyl)
ggplot(mtcars, aes(x=factor(am), y=mpg)) + geom_boxplot(aes(color=cyl))
ggplot(mtcars, aes(x=factor(am), y=mpg)) + geom_boxplot(aes(fill=cyl))
ggplot(mtcars, aes(x=factor(am), y=mpg)) + geom_boxplot()
ggplot(mtcars, aes(x=wt, y=mpg)) + geom_point()
ggplot(mtcars, aes(x=wt, y=mpg, color=am)) + geom_point()
ggplot(mtcars, aes(x=wt, y=mpg, color=factor(am))) + geom_point()
ggplot(mtcars, aes(x=wt, y=mpg, color=factor(cyl))) + geom_point()
?mtcars
ggplot(mtcars, aes(x=drat, y=mpg, color=factor(cyl))) + geom_point()
ggplot(mtcars, aes(x=drat, y=mpg, color=factor(am))) + geom_point()
?mtcars
?brewer
?rcolorbrewer
